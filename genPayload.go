package main

import (
	"encoding/hex"
	"log"
	"math/rand"

	"github.com/WebauthnWorks/fdo-rv/fdoshared"
	"github.com/fxamacker/cbor/v2"
)

func GenPayload22() {
	log.Println("Generating OwnerSign22....")

	var coseSignature fdoshared.CoseSignature
	coseSignature.Protected = make([]byte, 0)
	coseSignature.Unprotected.CUPHOwnerPubKey = fdoshared.FdoPublicKey{
		PkType: 10,
		PkEnc:  1,
		PkBody: make([]byte, 0),
	}
	sigBytes := make([]byte, 64)
	rand.Read(sigBytes)

	data, _ := hex.DecodeString("82818444C0A800C8696C6F63616C686F7374191F9103A264547970652F64486173685830D7822EA9E8A8782D4CDEB920E6D21D7BB1351B8F4DF6FD323E25F3466A97828DC492800C4A51F9540CBAF702F4C16E1E")
	coseSignature.Payload = data
	coseSignature.Signature = sigBytes

	var ownerSign fdoshared.OwnerSign22

	var to0d fdoshared.To0d
	ownershipVoucherBytes, _ := hex.DecodeString("851865588386186550325400d237084bcda53aaa08582a37418181820ef678254920616d2061207669727475616c20576562617574686e20576f726b732064657669636521830a01f6a26454797065382a6448617368583060d9e4b10c8f062eb547a5b3faf4bafb34737b6fde1e328bfa7fbc9eddfc64103410530fc5f09a15af855855589fbe72a264547970650664486173685830b9f087ff930c55bccefed40e9078e1e99baa354f217eeb1c027c5b3e4f33749efbf31648a02b0f5e746e40bf2ff6cac2835902763082027230820217a0030201020210325400d237084bcda53aaa08582a3741300a06082a8648ce3d040302307d311e301c06035504030c1546444f205445535420494e5445524d4544494154453122302006092a864886f70d0109011613696e666f40776562617574686e2e776f726b7331173015060355040a0c0e576562617574686e20576f726b73310b3009060355040613024e5a3111300f06035504070c0854617572616e6761301e170d3232303230323133313835365a170d3237303230323133313835365a3081a5310b3009060355040613024e5a3111300f0603550407130854617572616e676131173015060355040a130e576562617574686e20576f726b73316a3068060355040313615741572046444f205649525455414c205445535420333333323335333433303330363433323244333333373330333832443334363236333634324436313335333336313244363136313330333833353338333236313333333733343331205741573076301006072a8648ce3d020106052b8104002203620004f80673d90c4a43fc1bb38dd4691cd217cba3fa0c48862415835f18d030bd8136c707455b07d493f81307dfb2443583a583133ff419e3992dd41ff855c33078879abf6752e1653df48d11a408aa1b6a44c31af31a386040487fc35e6fe3ff2d1aa3333031300e0603551d0f0101ff040403020780301f0603551d230418301680143ea70672c2102b98767f3edcc905b7d7f3f9a704300a06082a8648ce3d04030203490030460221009f02381e31b9b71c0f3c0210b831f01b772dc204ddf20b4cab6b974f4c50faf2022100843f33340e305cb40be1c2ae104687b8983f165ef0dd94632fc04b01ffb9af415903d5308203d1308201b9a003020102020102300d06092a864886f70d010105050030753116301406035504030c0d46444f205445535420524f4f543122302006092a864886f70d0109011613696e666f40776562617574686e2e776f726b7331173015060355040a0c0e576562617574686e20576f726b73310b3009060355040613024e5a3111300f06035504070c0854617572616e6761301e170d3232303132333136303232395a170d3439303631303136303232395a307d311e301c06035504030c1546444f205445535420494e5445524d4544494154453122302006092a864886f70d0109011613696e666f40776562617574686e2e776f726b7331173015060355040a0c0e576562617574686e20576f726b73310b3009060355040613024e5a3111300f06035504070c0854617572616e67613059301306072a8648ce3d020106082a8648ce3d030107034200041076e0d0e67dbce00fd0ba7202f073a24a6ce1faecb20a69a2aad9b3203cb503ad1d24841c4f85d63d896b43104e5dd3c023b79f80e0d6c60bd725ade40fae30a32f302d300c0603551d13040530030101ff301d0603551d0e041604143ea70672c2102b98767f3edcc905b7d7f3f9a704300d06092a864886f70d010105050003820201003ab2db5fae488ebaf76996a086f9c001ce352028f6293af1a23f0c4b276f1b54a3f93d7e3f5250c2870a892d75fdcd3ab05d4cd489083c14c18ad3b104ae0b6af55ac5bfaa7ff5195a1611d3640d88ad99b72e053f30d494e6cbfcefb6f1cc2c88233ffc28276eddec3aff3588c7d70f1277e672abfb5adac9167d0f8bedb645908bb8a4a6f20127e61e4c5414e2f1406a1fbc542ec263862ab36b38721e95686f5ae2adfacd78a2a50edc31422c542b8716deca4c0a2e8b3ff438fc412632ec3e8b3224c048a84c978a92ebe4e8752a6fa0f6252feeada7e0125ab79af2e386a6739463cb252fbedec3b907dbde4c1fc0931e95d1321600910c023682fccce72c0c540ff64452fe961de8bd1464cbbdd6ea69cfb28a4ce3d738ffea76e1fcc221f161193d0e17b596ef323d6571cecc030f9190768531b2d5a76ad6d913b85364333170f5c40d544be09f5d2739248f61d86e8c5552322c11e4c43483e07dcc629338ab08da125f7fc79ffd194f107d28c03cc90b01b6fcb4aea40a61ae183b41e301a4c9af4b38ba4cd69142a989beab15a5d442d6194ebb7db5026559a85457cb77473876f9fc3a0d8c5b573518a077fd075e187b112b2f2119007712aa4744b5f15de42ad80f410d79f57b1f220b364fa6c8265e5753cf5404786069c194852daaf2e8e2c868aade2aab27c7d1f7990ac4b4536370cb1b8b371cd22a447359056a308205663082034e020900ada31b6ce9a9c313300d06092a864886f70d01010b050030753116301406035504030c0d46444f205445535420524f4f543122302006092a864886f70d0109011613696e666f40776562617574686e2e776f726b7331173015060355040a0c0e576562617574686e20576f726b73310b3009060355040613024e5a3111300f06035504070c0854617572616e6761301e170d3232303132333136303232395a170d3439303631303136303232395a30753116301406035504030c0d46444f205445535420524f4f543122302006092a864886f70d0109011613696e666f40776562617574686e2e776f726b7331173015060355040a0c0e576562617574686e20576f726b73310b3009060355040613024e5a3111300f06035504070c0854617572616e676130820222300d06092a864886f70d01010105000382020f003082020a0282020100dd22f3a4d369939feba7961af8f9b8d05ca379fa30b04a7d9381c823cf61744a505f96c7ac55cbf8dc3406580518301d2e485c4662efdede9ab24954ed53b9d80d49b7d71490b330ddf534f1ee899926893d1b4625a06cef7356acefc62f8072ec26feb65ed75a05f90312c5adf63ac03b92b2f1ac3347ef1347b9911b9d96ee53b1786e308b03273fd7608197f27f81461d32899651c02f930c5afc8b8ff526d2d96431759a2dd583d248ced3d2fd6251f1de29aec08727fea086d18bb008703c27b4caa73a2988379f3cefd0037ba90a0950484c593dacb5d6c6ad1f5aa1c61fbf6c207875038eed43d13f84fd1d0a9ce4e1f474933a7725bf266deeb2c562207f95fbce81ece0c76d942890254243563c2443886e6e171aca913329aafca38f88364e8845cb2363e2d85fcac85e14dc5d74557a6cfbe1331bcb2560a479468f94a9e167a4d28deb35d93606e8bcd6e1c94c2ff9bb8970dc5649c34d1584723d600d89a6d3f35db00ab9581c83364b4552430eb97e9b9d0f558fa92b50e133b6fffd2950a0cff5442f53d2ceb9f49e50dfcdd2c4363f130337530584fbd9885f9d21bf0f31f75fd4bc7c9c5714409148f85759820b511d3a53bf1ef07e918b1511894ba7dbce4c11b0845459552c5ca3b78d3891fd580aef78ac6b24fdbcf5db3ad713328d8f2f227d3b1a539094c4d69117bba3c2dc0b976c653b3efb27370203010001300d06092a864886f70d01010b050003820201005e317fa6dccf6a653b9551db115ff9ca31db25ad0947d9bead51c0258d2fb38832fb9e5cae00097552a941bfb1fc11abff87c8aef8e7a8e33a81130f31cd72fdd2f7ec68a7020bcfdcabf95e3855f311ea12e21de13f091937a594e7e48cd46322a787e965a7690684ee35647d08c3bd93d03fbc42a1a99c3af23cc828ca0e59dfd048bbfb7e9075c21d1d619bbae58207bc868e6cf1713cab689443ad329973340f9021d522a908fa22bcda6c37db845a417c6c4ba186697b368095825fb49e30562f88f1c492b55ad130756c8eaea5d70c61a217764f8e5594a3f7f2f817b81d5c71f59bb6dde9a1097f5cc9e54e923ba7b56f4248db0ae90df1c846bd60eb82473961097c3cf9fe1f3218eb109f1cf66989484fb84426864b4cd3cc9e4d631a46460566c96b1dafdb59976b1f5d696ec1e9d03f5338afd2df590df18191a3997d3e5f1141b2c2bbc0ec10487b6f63dda5c75621c54f77227db983ebe96367a6dbecfd7bb4d6fcff5071c4f906152cd3ecb52f3477ad6750a5d1e230a9b62259421e66365cb12d401ba0819ad14af7e43b06fda5998279a2b2a20134fa1cb2181cf025a0d30cd4c02a9c29ed3d8cfadfa873b06d6cc766b44a33a2bb7a09d46bf397843ff3ed12d5be5126eca7b843e42d766678d7fd77e34789d6b2a8f1c06b022540e55c747d031b5b53e17d1c2dd0623de58f5d078c298edcf5bfe4555f818443a10126a1190101830000f6588484a26454797065382a64486173685830cb6a2344c7149edcd4abbdebd02b0fdd58808c2d0e6f02ccdf14e60bb165491187072a34e88301a4e50e022f39c48bd0a26454797065382a644861736858308d5bab50436b8766752786d1e2ab62ab86f896e233c16aa1ea061d8da9d801706b09373fdca8ca07e68765b6cb5d2ea3f6830a01f658403b4305c827020d747f3ea7550de0ed43ed6d4b490c0db68c3638cfae1733ffb533044c3c7456bfe7ec6c11c980a9994f8b455e554c1c23e39e1fb102ff3400df")
	var ownershipVoucher fdoshared.OwnershipVoucher
	cbor.Unmarshal(ownershipVoucherBytes, &ownershipVoucher)
	to0d.OwnershipVoucher = ownershipVoucher
	to0d.WaitSeconds = 600
	nonceTO0Sign := make([]byte, 16)
	rand.Read(nonceTO0Sign)
	to0d.NonceTO0Sign = nonceTO0Sign

	to0dBytes, _ := cbor.Marshal(&to0d)

	ownerSign.To0d = to0dBytes
	ownerSign.To1d = coseSignature
	ownerSignBytes, _ := cbor.Marshal(ownerSign)
	ownerSignHex := hex.EncodeToString(ownerSignBytes)
	log.Println(ownerSignHex)
}

// type CoseSignature struct {
// 	_           struct{} `cbor:",toarray"`
// 	Protected   []byte
// 	Unprotected UnprotectedHeader
// 	Payload     []byte
// 	Signature   []byte
// }

// type UnprotectedHeader struct {
// 	CUPHNonce       []byte       `cbor:"256,keyasint,omitempty"`
// 	CUPHOwnerPubKey FdoPublicKey `cbor:"257,keyasint,omitempty"`
// 	EATMAROEPrefix  []byte       `cbor:"-258,keyasint,omitempty"`
// 	EUPHNonce       []byte       `cbor:"-259,keyasint,omitempty"`
// 	AESIV           []byte       `cbor:"5,keyasint,omitempty"`
// }
